// Code generated by MockGen. DO NOT EDIT.
// Source: contract_binder/contract/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	oracle "autonity-oracle/contract_binder/contract"
	big "math/big"
	reflect "reflect"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
)

// MockContractAPI is a mock of ContractAPI interface.
type MockContractAPI struct {
	ctrl     *gomock.Controller
	recorder *MockContractAPIMockRecorder
}

// MockContractAPIMockRecorder is the mock recorder for MockContractAPI.
type MockContractAPIMockRecorder struct {
	mock *MockContractAPI
}

// NewMockContractAPI creates a new mock instance.
func NewMockContractAPI(ctrl *gomock.Controller) *MockContractAPI {
	mock := &MockContractAPI{ctrl: ctrl}
	mock.recorder = &MockContractAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractAPI) EXPECT() *MockContractAPIMockRecorder {
	return m.recorder
}

// GetDecimals mocks base method.
func (m *MockContractAPI) GetDecimals(opts *bind.CallOpts) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecimals", opts)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecimals indicates an expected call of GetDecimals.
func (mr *MockContractAPIMockRecorder) GetDecimals(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecimals", reflect.TypeOf((*MockContractAPI)(nil).GetDecimals), opts)
}

// GetRound mocks base method.
func (m *MockContractAPI) GetRound(opts *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound", opts)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRound indicates an expected call of GetRound.
func (mr *MockContractAPIMockRecorder) GetRound(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MockContractAPI)(nil).GetRound), opts)
}

// GetRoundData mocks base method.
func (m *MockContractAPI) GetRoundData(opts *bind.CallOpts, _round *big.Int, _symbol string) (oracle.IOracleRoundData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoundData", opts, _round, _symbol)
	ret0, _ := ret[0].(oracle.IOracleRoundData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoundData indicates an expected call of GetRoundData.
func (mr *MockContractAPIMockRecorder) GetRoundData(opts, _round, _symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoundData", reflect.TypeOf((*MockContractAPI)(nil).GetRoundData), opts, _round, _symbol)
}

// GetSymbols mocks base method.
func (m *MockContractAPI) GetSymbols(opts *bind.CallOpts) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbols", opts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbols indicates an expected call of GetSymbols.
func (mr *MockContractAPIMockRecorder) GetSymbols(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbols", reflect.TypeOf((*MockContractAPI)(nil).GetSymbols), opts)
}

// GetVotePeriod mocks base method.
func (m *MockContractAPI) GetVotePeriod(opts *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotePeriod", opts)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotePeriod indicates an expected call of GetVotePeriod.
func (mr *MockContractAPIMockRecorder) GetVotePeriod(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotePeriod", reflect.TypeOf((*MockContractAPI)(nil).GetVotePeriod), opts)
}

// GetVoters mocks base method.
func (m *MockContractAPI) GetVoters(opts *bind.CallOpts) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoters", opts)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoters indicates an expected call of GetVoters.
func (mr *MockContractAPIMockRecorder) GetVoters(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoters", reflect.TypeOf((*MockContractAPI)(nil).GetVoters), opts)
}

// LatestRoundData mocks base method.
func (m *MockContractAPI) LatestRoundData(opts *bind.CallOpts, _symbol string) (oracle.IOracleRoundData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestRoundData", opts, _symbol)
	ret0, _ := ret[0].(oracle.IOracleRoundData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestRoundData indicates an expected call of LatestRoundData.
func (mr *MockContractAPIMockRecorder) LatestRoundData(opts, _symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestRoundData", reflect.TypeOf((*MockContractAPI)(nil).LatestRoundData), opts, _symbol)
}

// SetSymbols mocks base method.
func (m *MockContractAPI) SetSymbols(opts *bind.TransactOpts, _symbols []string) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSymbols", opts, _symbols)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSymbols indicates an expected call of SetSymbols.
func (mr *MockContractAPIMockRecorder) SetSymbols(opts, _symbols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSymbols", reflect.TypeOf((*MockContractAPI)(nil).SetSymbols), opts, _symbols)
}

// Vote mocks base method.
func (m *MockContractAPI) Vote(opts *bind.TransactOpts, _commit *big.Int, _reports []oracle.IOracleReport, _salt *big.Int, _extra uint8) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", opts, _commit, _reports, _salt, _extra)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockContractAPIMockRecorder) Vote(opts, _commit, _reports, _salt, _extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockContractAPI)(nil).Vote), opts, _commit, _reports, _salt, _extra)
}

// WatchNewRound mocks base method.
func (m *MockContractAPI) WatchNewRound(opts *bind.WatchOpts, sink chan<- *oracle.OracleNewRound) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchNewRound", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNewRound indicates an expected call of WatchNewRound.
func (mr *MockContractAPIMockRecorder) WatchNewRound(opts, sink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNewRound", reflect.TypeOf((*MockContractAPI)(nil).WatchNewRound), opts, sink)
}

// WatchNewSymbols mocks base method.
func (m *MockContractAPI) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *oracle.OracleNewSymbols) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchNewSymbols", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNewSymbols indicates an expected call of WatchNewSymbols.
func (mr *MockContractAPIMockRecorder) WatchNewSymbols(opts, sink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNewSymbols", reflect.TypeOf((*MockContractAPI)(nil).WatchNewSymbols), opts, sink)
}

// WatchPenalized mocks base method.
func (m *MockContractAPI) WatchPenalized(opts *bind.WatchOpts, sink chan<- *oracle.OraclePenalized, _participant []common.Address) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchPenalized", opts, sink, _participant)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchPenalized indicates an expected call of WatchPenalized.
func (mr *MockContractAPIMockRecorder) WatchPenalized(opts, sink, _participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchPenalized", reflect.TypeOf((*MockContractAPI)(nil).WatchPenalized), opts, sink, _participant)
}
